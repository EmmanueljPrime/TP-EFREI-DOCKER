name: CI/CD Pipeline - Kubernetes Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  PHP_IMAGE: emmanueljprime/gestion-produits-php
  MYSQL_IMAGE: emmanueljprime/gestion-produits-mysql

jobs:
  # Phase 1: Tests et validation du code
  tests:
    name: 🧪 Tests et Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Kubernetes manifests
        run: |
          # Installer kubeval pour valider les YAML
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin
          
          # Valider les manifests K8s
          kubeval Deployment.yaml Service.yaml

      - name: Test Docker builds
        run: |
          # Test build PHP
          docker build -t test-php ./php
          
          # Test build MySQL  
          docker build -t test-mysql ./database
          
          # Test de base de l'image PHP
          docker run --rm test-php php --version

  # Phase 2: Build et push des images
  build:
    name: 🔨 Build & Push Images
    needs: tests
    runs-on: ubuntu-latest
    outputs:
      php-tag: ${{ steps.meta.outputs.php-tag }}
      mysql-tag: ${{ steps.meta.outputs.mysql-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate image tags
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          echo "php-tag=${PHP_IMAGE}:${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "mysql-tag=${MYSQL_IMAGE}:${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push PHP image
        uses: docker/build-push-action@v5
        with:
          context: ./php
          push: true
          tags: |
            ${{ steps.meta.outputs.php-tag }}
            ${{ env.PHP_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push MySQL image
        uses: docker/build-push-action@v5
        with:
          context: ./database
          push: true
          tags: |
            ${{ steps.meta.outputs.mysql-tag }}
            ${{ env.MYSQL_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Phase 3: Déploiement et tests d'intégration
  deploy-test:
    name: 🚀 Deploy & Integration Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.28.0

      - name: Update image tags in manifests
        run: |
          # Remplacer les tags latest par les tags spécifiques
          sed -i "s|${PHP_IMAGE}:latest|${{ needs.build.outputs.php-tag }}|g" Deployment.yaml
          sed -i "s|${MYSQL_IMAGE}:latest|${{ needs.build.outputs.mysql-tag }}|g" Deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          echo "🚀 Déploiement de l'application..."
          
          # Appliquer les manifests
          kubectl apply -f Deployment.yaml
          kubectl apply -f Service.yaml
          
          # Attendre que MySQL soit prêt
          echo "⏳ Attente du démarrage de MySQL..."
          kubectl wait --for=condition=ready pod -l app=mysql -n gestion-produits --timeout=300s
          
          # Attendre que PHP soit prêt
          echo "⏳ Attente du démarrage de PHP..."
          kubectl wait --for=condition=ready pod -l app=php -n gestion-produits --timeout=300s

      - name: Scale application
        run: |
          echo "📈 Scaling de l'application à 3 réplicas..."
          
          # Scaler à 3 réplicas
          kubectl scale deployment php-deployment --replicas=3 -n gestion-produits
          
          # Attendre que tous les pods soient prêts
          kubectl wait --for=condition=ready pod -l app=php -n gestion-produits --timeout=180s
          
          # Vérifier le nombre de réplicas
          READY_PODS=$(kubectl get pods -l app=php -n gestion-produits --no-headers | grep Running | wc -l)
          if [ $READY_PODS -ne 3 ]; then
            echo "❌ Erreur: $READY_PODS pods prêts au lieu de 3"
            exit 1
          fi
          echo "✅ 3 réplicas PHP déployés avec succès"

      - name: Integration Tests
        run: |
          echo "🧪 Tests d'intégration..."
          
          # Test de connectivité de base
          kubectl port-forward service/php-service 8080:80 -n gestion-produits &
          PF_PID=$!
          sleep 10
          
          # Test HTTP
          if curl -f -s http://localhost:8080 > /dev/null; then
            echo "✅ Test HTTP: Application accessible"
          else
            echo "❌ Test HTTP: Application inaccessible"
            kill $PF_PID || true
            exit 1
          fi
          
          # Test de load balancing (vérifier les différents pods)
          echo "🔄 Test du load balancing..."
          UNIQUE_RESPONSES=$(for i in {1..10}; do 
            curl -s http://localhost:8080 | grep -o "Pod.*" || echo "response-$i"
          done | sort -u | wc -l)
          
          if [ $UNIQUE_RESPONSES -gt 1 ]; then
            echo "✅ Load balancing: Détection de $UNIQUE_RESPONSES réponses différentes"
          else
            echo "⚠️  Load balancing: Une seule réponse détectée (peut être normal)"
          fi
          
          kill $PF_PID || true

      - name: Performance Tests
        run: |
          echo "⚡ Tests de performance..."
          
          kubectl port-forward service/php-service 8081:80 -n gestion-produits &
          PF_PID=$!
          sleep 5
          
          # Test de charge simple avec curl
          echo "Sending 50 requests..."
          for i in {1..50}; do
            curl -s -o /dev/null -w "%{http_code} %{time_total}s\n" http://localhost:8081 &
            if [ $((i % 10)) -eq 0 ]; then
              wait
              echo "Completed $i requests..."
            fi
          done
          wait
          
          kill $PF_PID || true
          echo "✅ Tests de performance terminés"

      - name: Deployment Summary
        run: |
          echo "📊 Résumé du déploiement:"
          echo "=================================="
          
          # Pods status
          echo "🏗️  Pods déployés:"
          kubectl get pods -n gestion-produits -o wide
          
          # Services
          echo -e "\n🌐 Services:"
          kubectl get services -n gestion-produits
          
          # Endpoints (load balancing)
          echo -e "\n⚖️  Endpoints (Load Balancing):"
          kubectl get endpoints php-service -n gestion-produits -o yaml | grep -A 20 "addresses:"
          
          # Resource usage
          echo -e "\n💾 Utilisation des ressources:"
          kubectl top pods -n gestion-produits --no-headers 2>/dev/null || echo "Metrics server non disponible"
          
          echo -e "\n✅ Déploiement Kubernetes simulé avec succès!"
          echo "🎯 Application scalable avec 3 réplicas et load balancing actif"

  # Phase 4: Nettoyage et rapport
  cleanup:
    name: 🧹 Cleanup & Report
    needs: [build, deploy-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Report
        run: |
          echo "📋 Rapport de déploiement:"
          echo "========================"
          echo "✅ Images buildées et pushées:"
          echo "   - PHP: ${{ needs.build.outputs.php-tag }}"
          echo "   - MySQL: ${{ needs.build.outputs.mysql-tag }}"
          echo ""
          echo "🎯 Tests effectués:"
          echo "   - Validation des manifests Kubernetes"
          echo "   - Build et test des images Docker"
          echo "   - Déploiement sur cluster Minikube"
          echo "   - Scaling à 3 réplicas"
          echo "   - Tests d'intégration HTTP"
          echo "   - Tests de load balancing"
          echo "   - Tests de performance"
          echo ""
          echo "🚀 Pipeline CI/CD complète simulée avec succès!"
